# tool_catcher.py
import re
import json
import requests
from bs4 import BeautifulSoup

#from tools.calc  import CalcTool
import re
import math

import re
import requests


class ToolCatcherImprovedSearch:
    def __init__(self):
        self.headers = {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/118.0.0.0 Safari/537.36"
            )
        }

    def _clean_intro(self, text: str) -> str:
        """
        –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –Ω–µ —Å–ª–∏–ø–∞–ª–∏—Å—å.
        –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ—Ç [1], [2] –∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö.
        """
        if not text:
            return text

        #  1) –£–¥–∞–ª—è–µ–º –≤—Å—ë, —á—Ç–æ –≤ —Å–∫–æ–±–∫–∞—Ö, –∑–∞–º–µ–Ω—è—è –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        cleaned = re.sub(r"\s*\([^)]*\)\s*", " ", text)

        #  2) –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ [1], [2], [note 3]
        cleaned = re.sub(r"\s*\[[^\]]*\]\s*", " ", cleaned)

        #  3) –ß–∏—Å—Ç–∏–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π
        cleaned = re.sub(r"\s{2,}", " ", cleaned)
        cleaned = re.sub(r"\s+([.,;:?!])", r"\1", cleaned)

        #  4) –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–∞–º–∏ –∏ –ø–æ—Å–ª–µ –Ω–∏—Ö
        cleaned = re.sub(r"\s*([-‚Äì‚Äî])\s*", r" \1 ", cleaned)

        #5) –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        cleaned = re.sub(r"\s{2,}", " ", cleaned).strip()

        return cleaned

    def execute_search(self, query: str):
        """
        –ò—â–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ —Å–º—ã—Å–ª—É: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenSearch API –∏ –ø–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü,
        –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ—Ç –∞–±–∑–∞—Ü –æ—Ç —Å–∫–æ–±–æ—á–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫ –∏ —Å—Å—ã–ª–æ–∫.
        """
        try:
            search_url = "https://ru.wikipedia.org/w/api.php"
            params = {
                "action": "opensearch",
                "search": query.strip(),
                "limit": 3,
                "namespace": 0,
                "format": "json"
            }

            response = requests.get(search_url, headers=self.headers, params=params, timeout=8)
            response.raise_for_status()
            data = response.json()

            titles = data[1]
            links = data[3]

            if not titles:
                return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É."

            title = titles[0]
            link = links[0]

            page = requests.get(link, headers=self.headers, timeout=8)
            page.raise_for_status()
            soup = BeautifulSoup(page.text, "html.parser")

            # –ò–Ω–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π <p> –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –∏—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–Ω—É–ª–µ–≤–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            first_p = None
            for p in soup.select("p"):
                txt = p.get_text(strip=True)
                if txt:
                    first_p = txt
                    break

            if not first_p:
                return f"–°—Ç–∞—Ç—å—è '{title}' –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—É–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)
            cleaned_text = self._clean_intro(first_p)

            return f"{cleaned_text} (–ò—Å—Ç–æ—á–Ω–∏–∫: {title})"

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"


# ------------------------
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# ------------------------


class CalcTool:


    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: —Ü–∏—Ñ—Ä—ã, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Å–∫–æ–±–∫–∏, –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞, –ø—Ä–æ—Ü–µ–Ω—Ç, —Å–∏–º–≤–æ–ª œÄ
    SAFE_PATTERN = re.compile(r"^[0-9+\-*/()., eE^%œÄa-zA-Z_]*$")

    def __init__(self):
        # –ë–µ—Ä—ë–º –≤—Å—ë –∏–∑ math (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏–º—ë–Ω)
        self.allowed_names = {name: obj for name, obj in math.__dict__.items() if not name.startswith("__")}
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∞–ª–∏–∞—Å—ã
        self.allowed_names.update({
            "abs": abs,
            "round": round,
        })
        # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        def cube_root(x):
            # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
            try:
                x = float(x)
            except Exception:
                return float('nan')
            if x >= 0:
                return x ** (1.0/3.0)
            else:
                return -((-x) ** (1.0/3.0))

        self.allowed_names['cube_root'] = cube_root
        # –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–º–≤–æ–ª—É pi —Ç–∞–∫–∂–µ –∫–∞–∫ pi
        self.allowed_names['pi'] = math.pi
        self.allowed_names['œÄ'] = math.pi

    def _insert_implicit_multiplication(self, expr: str) -> str:
        # —á–∏—Å–ª–æ( -> —á–∏—Å–ª–æ*(
        expr = re.sub(r'(\d)\s*(\()', r'\1*\2', expr)
        # )—á–∏—Å–ª–æ -> )*—á–∏—Å–ª–æ
        expr = re.sub(r'(\))\s*(\d)', r'\1*\2', expr)
        # ) ( -> )*(
        expr = re.sub(r'(\))\s*(\()', r'\1*\2', expr)
        # —á–∏—Å–ª–æœÄ –∏–ª–∏ —á–∏—Å–ª–æpi -> —á–∏—Å–ª–æ*pi
        expr = re.sub(r'(\d)\s*(œÄ|pi)', r'\1*\2', expr)
        # œÄ—á–∏—Å–ª–æ –∏–ª–∏ pichislo -> pi*—á–∏—Å–ª–æ
        expr = re.sub(r'(œÄ|pi)\s*(\d|\()', r'\1*\2', expr)
        # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—è–¥–æ–º —Å —á–∏—Å–ª–æ–º: sin2 -> sin*2
        expr = re.sub(r'([a-zA-Z_]+)\s*(\d)', r'\1*\2', expr)
        # —á–∏—Å–ª–æ —Ä—è–¥–æ–º —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: 2sin -> 2*sin
        expr = re.sub(r'(\d)\s*([a-zA-Z_]+)', r'\1*\2', expr)
        return expr

    def calculate(self, expression: str):
        """
        ssadfsdaasdfasf"""
        expr = expression.strip()

        # --- üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç–µ–ø–µ–Ω–µ–π ---
        superscript_map = {
            "‚Å∞": "0", "¬π": "1", "¬≤": "2", "¬≥": "3", "‚Å¥": "4",
            "‚Åµ": "5", "‚Å∂": "6", "‚Å∑": "7", "‚Å∏": "8", "‚Åπ": "9"
        }
        def replace_superscripts(expr):
            def repl(m):
                s = m.group(0)
                normal = ''.join(superscript_map[c] for c in s)
                return '**' + normal
            return re.sub(r'[‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ]+', repl, expr)
        expr = replace_superscripts(expr)
        # --- üîπ –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ---

        if not self.SAFE_PATTERN.match(expr):
            return "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏."

        expr = expr.replace(',', '.')
        expr = expr.replace('œÄ', 'pi')
        expr = re.sub(r'(\d+(?:\.\d+)?)\s*%', r'(\1/100)', expr)
        expr = expr.replace('^', '**')
        expr = self._insert_implicit_multiplication(expr)

        try:
            result = eval(expr, {"__builtins__": {}}, self.allowed_names)
            if isinstance(result, float):
                result = round(result, 12)
            return result
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}"



# –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ (–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö)


class ToolCatcher:
    """
    –õ–æ–≤–∏—Ç —Ç–µ–≥–∏ <calc> –∏ <search>.
    –ü—Ä–∏ <calc> –≤—ã—á–∏—Å–ª—è–µ—Ç —Å CalcTool –∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ results.jsonl.
    """
    def __init__(self, calc_tool: CalcTool, output_file="results.jsonl"):
        self.calc_matches = []
        self.search_matches = []
        self.calc_tool = calc_tool
        self.output_file = output_file
        self.search_tool = ToolCatcherImprovedSearch()


    def catch(self, text: str):
        self.calc_matches = [m.strip() for m in re.findall(r"<calc>(.*?)</calc>", text, flags=re.DOTALL)]
        self.search_matches = [m.strip() for m in re.findall(r"<search>(.*?)</search>", text, flags=re.DOTALL)]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ <calc>
        with open(self.output_file, "a", encoding="utf-8") as f:
            for expr in self.calc_matches:
                result = self.calc_tool.calculate(expr)
                json_line = json.dumps({"expression": expr, "result": result}, ensure_ascii=False)
                f.write(json_line + "\n")
        
            for query in self.search_matches:
                    result = self.search_tool.execute_search(query)
                    json_line = json.dumps({"type": "search", "query": query, "result": result}, ensure_ascii=False)
                    f.write(json_line + "\n")
        return {"calc": self.calc_matches, "search": self.search_matches}

    def clear(self):
        self.calc_matches = []
        self.search_matches = []

    def __repr__(self):
        return f"<ToolCatcher: {len(self.calc_matches)} calc, {len(self.search_matches)} search>"


# main.py
if __name__ == "__main__":
    

    output = """–ú–æ–¥–µ–ª—å: <calc>3 + 2 = 5</calc>
    #–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: <search>–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –§—Ä–∞–Ω—Ü–∏–∏ 2025</search>"""
    catcher = ToolCatcher(calc_tool=CalcTool())
    found = catcher.catch(output)

    print("Calc –Ω–∞–π–¥–µ–Ω–æ:", found["calc"])        
    print("Search –Ω–∞–π–¥–µ–Ω–æ:", found["search"])    

    # –û—á–∏—Å—Ç–∫–∞
    catcher.clear()
    print("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", catcher)
